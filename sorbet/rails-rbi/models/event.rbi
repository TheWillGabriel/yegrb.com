# This is an autogenerated file for dynamic methods in Event
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Event::Relation < ActiveRecord::Relation
  include Event::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Event)
end

class Event < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Event::NamedScope
  Elem = type_template(fixed: Event)

  sig { returns(T.nilable(String)) }
  def content(); end

  sig { params(value: T.nilable(String)).void }
  def content=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(String)) }
  def location(); end

  sig { params(value: T.nilable(String)).void }
  def location=(value); end

  sig { returns(T.nilable(String)) }
  def meetup_id(); end

  sig { params(value: T.nilable(String)).void }
  def meetup_id=(value); end

  sig { returns(ActiveSupport::TimeWithZone) }
  def time(); end

  sig { params(value: ActiveSupport::TimeWithZone).void }
  def time=(value); end

  sig { returns(String) }
  def title(); end

  sig { params(value: String).void }
  def title=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T.nilable(String)) }
  def url(); end

  sig { params(value: T.nilable(String)).void }
  def url=(value); end

  sig { returns(User) }
  def user(); end

  sig { params(value: User).void }
  def user=(value); end

  sig { returns(Integer) }
  def user_id(); end

  sig { params(value: Integer).void }
  def user_id=(value); end

  sig { returns(Video::Relation) }
  def videos(); end

  sig { params(value: T.any(T::Array[Video], Video::Relation)).void }
  def videos=(value); end

end


module Event::NamedScope
  extend T::Sig

  sig { returns(Event::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Event::Relation) }
  def past(*args); end

  sig { params(args: T.untyped).returns(Event::Relation) }
  def sorted(*args); end

  sig { params(args: T.untyped).returns(Event::Relation) }
  def upcoming(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Event::Relation) }
  def except(*args, block); end

end

